cmake_minimum_required(VERSION 3.14.0)

project(cameo_mcstas_client
  VERSION 0.14.1
  LANGUAGES CXX
  )

#--------------- Helpers
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

option(INSTALL_CLIENT "Install the client library" ON)

set(LIBNAME ${PROJECT_NAME})
set(INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})
string(TOUPPER lib component_client_runtime)
string(TOUPPER dev component_client_development)
set(ConfigPackageLocation ${CMAKE_INSTALL_DATADIR}/cmake/${CMAKE_PROJECT_NAME})

add_library(${LIBNAME} src/sim_request.cc src/sim_result.cc src/sim_request_answer.cc )
target_include_directories(${LIBNAME}
  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
  PRIVATE src)
target_compile_features(${LIBNAME} PUBLIC cxx_std_11)
set_target_properties(${LIBNAME} PROPERTIES
  SOVERSION ${PROJECT_VERSION_MAJOR}
  VERSION ${PROJECT_VERSION}
  POSITION_INDEPENDENT_CODE 1 # this is needed for static compilation 
  )
add_library(${NAMESPACE}::${LIBNAME} ALIAS ${LIBNAME})

#------------------------------------------------------------
include(GenerateExportHeader)
generate_export_header(${LIBNAME}
    EXPORT_MACRO_NAME ${LIBNAME}_EXPORT
    EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/${INSTALL_INCLUDEDIR}/export.hh
)

#---------------
# Library version
write_basic_package_version_file(${PROJECT_NAME}-config-version.cmake
  COMPATIBILITY SameMajorVersion
  VERSION ${PROJECT_VERSION}
  )


configure_package_config_file(cmake/${PROJECT_NAME}-config.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
  INSTALL_DESTINATION  ${ConfigPackageLocation}
  )


#------------------------------------------------------------
# Install
#------------------------------------------------------------
if(INSTALL_CLIENT AND BUILD_SHARED_LIBS)

if(FALSE)
if (EXISTS "/etc/debian_version") # it is a debian machine
  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/changelog.gz
    COMMAND gzip -cn9 ${CMAKE_CURRENT_SOURCE_DIR}/ChangeLog ${CMAKE_CURRENT_BINARY_DIR}/changelog.gz
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
    DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/changelog"
    COMMENT "Compressing changelog"
	)
  
  add_custom_target(changelog
	ALL
	#	DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/changelog.gz
	COMMAND gzip -cn9 ${CMAKE_CURRENT_SOURCE_DIR}/ChangeLog > ${CMAKE_CURRENT_BINARY_DIR}/changelog.gz
	)
  
  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/changelog.gz"
	DESTINATION "${CMAKE_INSTALL_DOCDIR}"
	COMPONENT ${component_client_runtime}
	)
endif()
endif()

install(EXPORT cameo_mcstas_client_targets
  FILE ${PROJECT_NAME}-targets.cmake
#  FILE ${PROJECT_NAME}Config.cmake #${PROJECT_NAME}Targets.cmake
  NAMESPACE ${NAMESPACE}::
  DESTINATION ${ConfigPackageLocation}
  COMPONENT ${component_client_development}
  )
export(EXPORT cameo_mcstas_client_targets
  FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-targets.cmake
  NAMESPACE ${NAMESPACE}::
  )

install(
  FILES
  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
  DESTINATION ${ConfigPackageLocation}
  COMPONENT ${component_client_development}
  )

install(TARGETS ${LIBNAME} 
  EXPORT cameo_mcstas_client_targets
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} # windows
    COMPONENT ${component_client_runtime}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/ # dynamic
    COMPONENT ${component_client_runtime}
    NAMELINK_COMPONENT ${component_client_development} #from CMake 3.12
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/ # static
    COMPONENT ${component_client_development}
  PUBLIC_HEADER  DESTINATION ${INSTALL_INCLUDEDIR}
    COMPONENT ${component_client_development}
#  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

# this is to install the headers
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/ # don't forget the trailing /
  DESTINATION ${INSTALL_INCLUDEDIR}
  COMPONENT ${component_client_development}
  FILES_MATCHING  PATTERN "*\.h*"
  )
# this is to install the version header that is generated by cmake
install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/ # don't forget the trailing /
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  COMPONENT ${component_client_development}
  FILES_MATCHING  PATTERN *.hh
  )

endif()




#------------------------------------------------------------
# CPack
#------------------------------------------------------------
include(${CMAKE_CURRENT_SOURCE_DIR}/packaging/CPackConfig.cmake)
include(CPack)


# Every library has unit tests, of course
 if(ENABLE_TESTING)
   add_executable(testclient ./test/client.cpp)
#   target_include_directories(testclient PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
#     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../doctest/doctest/>)
   target_link_libraries(testclient ${LIBNAME} doctest::doctest)
  
#   enable_testing()
   add_test(testclient testclient )
   add_test(test_json  diff testclient.json request.json)
   set_tests_properties(testclient test_json PROPERTIES LABELS client)
  
  
   add_custom_command(
     TARGET testclient POST_BUILD
     COMMAND  ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/request.json ${CMAKE_CURRENT_BINARY_DIR}/request.json
     COMMENT "Copying request.json in the current directory for running the test")
  
 endif()
